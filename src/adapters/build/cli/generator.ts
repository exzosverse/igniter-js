import * as fs from 'fs'
import * as path from 'path'
import type { IgniterBuildConfig } from '../types'
import type { IgniterRouter, IgniterRouterSchema } from '../../../types'
import { extractRouterSchema } from '../../../services/router.service'
import { renderClientTemplate, renderSchemaTemplate } from './templates'

/**
 * Generate client files from Igniter router
 */
export async function generateSchemaFromRouter(
  router: IgniterRouter<any, any>,
  config: IgniterBuildConfig
) {
  try {
    // Extract clean schema from router (reuse existing function)
    const schema = extractRouterSchema(router)
    
    if (config.debug) {
      console.log('üìä Extracted schema:', JSON.stringify(schema, null, 2))
    }

    // Ensure output directory exists
    const outputDir = config.outputDir || 'generated'
    await ensureDirectoryExists(outputDir)

    // Generate schema file
    await generateSchemaFile(schema, outputDir, config)
    
    // Generate client file
    await generateClientFile(schema, outputDir, config)
    
    // Generate index file
    await generateIndexFile(outputDir, config)

    if (config.debug) {
      console.log('‚úÖ Generated files:')
      console.log(`   üìÑ ${outputDir}/schema.generated.ts`)
      console.log(`   üìÑ ${outputDir}/client.generated.ts`)
      console.log(`   üìÑ ${outputDir}/index.ts`)
    }

  } catch (error) {
    console.error('‚ùå Failed to generate schema from router:', error)
    throw error
  }
}

/**
 * Generate schema TypeScript file
 */
async function generateSchemaFile(
  schema: IgniterRouterSchema<any, any>,
  outputDir: string,
  config: IgniterBuildConfig
) {
  const content = renderSchemaTemplate(schema, config)
  const filePath = path.join(outputDir, 'schema.generated.ts')
  
  await writeFileWithHeader(filePath, content, config)
}

/**
 * Generate client TypeScript file
 */
async function generateClientFile(
  schema: IgniterRouterSchema<any, any>,
  outputDir: string,
  config: IgniterBuildConfig
) {
  const content = renderClientTemplate(schema, config)
  const filePath = path.join(outputDir, 'client.generated.ts')
  
  await writeFileWithHeader(filePath, content, config)
}

/**
 * Generate index file for easy imports
 */
async function generateIndexFile(
  outputDir: string,
  config: IgniterBuildConfig
) {
  const content = `// Generated by @igniter-js/cli - DO NOT EDIT
// This file provides convenient exports for the generated client

export { api } from './client.generated'
export type { AppRouterSchema } from './schema.generated'

// Re-export common types for convenience
export type {
  IgniterRouterSchema,
  InferRouterCaller
} from '@igniter-js/core'
`

  const filePath = path.join(outputDir, 'index.ts')
  await fs.promises.writeFile(filePath, content, 'utf8')
}

/**
 * Write file with generation header
 */
async function writeFileWithHeader(
  filePath: string,
  content: string,
  config: IgniterBuildConfig
) {
  const header = generateFileHeader(config)
  const fullContent = header + '\n\n' + content
  
  await fs.promises.writeFile(filePath, fullContent, 'utf8')
}

/**
 * Generate file header with metadata
 */
function generateFileHeader(config: IgniterBuildConfig): string {
  const timestamp = new Date().toISOString()
  
  return `/**
 * Generated by @igniter-js/cli
 * 
 * ‚ö†Ô∏è  DO NOT EDIT THIS FILE MANUALLY
 * 
 * This file was automatically generated from your Igniter router.
 * Any changes made to this file will be overwritten when the CLI regenerates it.
 * 
 * To modify the client API, update your controller files instead.
 * 
 * Generated: ${timestamp}
 * Framework: ${config.framework}
 * Output: ${config.outputDir}
 */`
}

/**
 * Ensure directory exists, create if it doesn't
 */
async function ensureDirectoryExists(dirPath: string) {
  try {
    await fs.promises.access(dirPath)
  } catch (error) {
    // Directory doesn't exist, create it
    await fs.promises.mkdir(dirPath, { recursive: true })
  }
}

/**
 * Get framework-specific output path
 */
export function getDefaultOutputPath(framework: string): string {
  switch (framework) {
    case 'nextjs':
      // Detect App Router vs Pages Router
      if (fs.existsSync('app/')) {
        return 'app/lib'  // App Router
      } else if (fs.existsSync('pages/')) {
        return 'lib'      // Pages Router
      }
      return 'lib'        // Fallback
    
    case 'vite':
      return 'src/generated'
    
    case 'webpack':
      return 'src/generated'
    
    default:
      return 'generated'
  }
}

/**
 * Detect framework from project structure
 */
export function detectFramework(): 'nextjs' | 'vite' | 'webpack' | 'generic' {
  // Check for Next.js
  if (fs.existsSync('next.config.js') || 
      fs.existsSync('next.config.mjs') || 
      fs.existsSync('next.config.ts') ||
      fs.existsSync('app/') ||
      fs.existsSync('pages/')) {
    return 'nextjs'
  }
  
  // Check for Vite
  if (fs.existsSync('vite.config.js') || 
      fs.existsSync('vite.config.ts') ||
      fs.existsSync('vite.config.mjs')) {
    return 'vite'
  }
  
  // Check for Webpack
  if (fs.existsSync('webpack.config.js') ||
      fs.existsSync('webpack.config.ts')) {
    return 'webpack'
  }
  
  return 'generic'
} 