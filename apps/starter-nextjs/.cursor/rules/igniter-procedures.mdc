---
description: Provides the correct and validated pattern for creating and using procedures (middlewares) in Igniter.js.
globs: ["src/features/**/procedures/**"]
alwaysApply: false
---

# Igniter.js: Procedures (Middlewares)

This guide provides the **correct and validated** pattern for creating and using procedures (middlewares) in Igniter.js.

## 1. How Procedures Extend Context

Procedures in Igniter.js extend the context for subsequent actions by **returning an object**. This is a critical pattern to understand.

-   **DO NOT use `next(newContext)`:** Unlike frameworks like Express, you must not call a `next` function to extend context.
-   **RETURN an object:** The object you return from the procedure's handler will be shallow-merged into the `context` that the final action receives.
-   **Special Case: `next()` for Post-Action Processing**: The `next()` function in a procedure's handler should **only** be used if the procedure needs to capture and process the *result* of the subsequent action (e.g., for auditing, performance monitoring, or response modification). In such cases, `await next()` should be called, and the result should then be handled. Otherwise, procedures should either return an object to extend the context (e.g., `{ auth: { user } }`) or `void` (implicitly or explicit `return;`) to simply allow the request to proceed without modifying the context.
-   **Auth Procedure Context for Optional Authentication**: When an `authProcedure` is configured with `required: false` (or if authentication fails but is not strictly required), it **MUST** explicitly return an object like `{ auth: { user: null } }` to maintain consistent context typing, indicating that no authenticated user is present.

### ✅ Correct Example: `auth.procedure.ts`

This example demonstrates how to verify a user and add their information to the context, now leveraging globally injected services and repositories.

```typescript
// src/features/auth/procedures/auth.procedure.ts (Example - Refactored)
import { igniter } from "@/igniter";
import { User } from "@prisma/client";
import { JWT_SECRET } from "../auth.interfaces";
import { AuthRepository } from "../repositories/auth.repository"; // Import here for instantiation within procedure

// Define the type for the options that can be passed when using the procedure.
/**
 * @typedef {object} AuthProcedureOptions
 * @property {boolean} [required=true] - Indicates if authentication is mandatory for the route.
 */
type AuthProcedureOptions = {
  required?: boolean;
};

// Define the shape of the extended context we are adding.
/**
 * @typedef {object} AuthContext
 * @property {object} features - Features context object.
 * @property {object} features.auth - Authentication context object.
 * @property {object} features.auth.session - User session details.
 * @property {User | null} features.auth.session.user - The authenticated user object or null if unauthenticated.
 * @property {AuthRepository} features.auth.repository - The auth repository for user-related database operations.
 */
type AuthContext = {
  auth: {
    session: {
      user: User | null;
    };
    repository: AuthRepository;
  };
};

/**
   * @method handler
   * @description
   * Procedure responsible for authenticating the user by validating the JWT token from the request cookies.
   * Instantiates the AuthRepository and injects it into the context at `auth.repository`.
   * If `options.required` is true, authentication is enforced: if the session token is missing, invalid, or the user is not found, a 401 Unauthorized response is returned.
   * If `options.required` is false, unauthenticated access is allowed and the user in context may be null.
   *
   * @param {AuthProcedureOptions} [options={ required: true }] - Options for the procedure. If `required` is true, authentication is mandatory.
   * @param {object} ctx - The context object provided by Igniter.js.
   * @param {object} ctx.request - The incoming request object.
   * @param {object} ctx.response - The response builder object.
   * @param {object} ctx.context - The current application context.
   * @returns {Promise<AuthContext | Response | void>} Returns the extended context with user info and AuthRepository if authentication passes or is not required, or a 401 response if authentication fails and is required.
   */
export const authProcedure = igniter.procedure({
  name: "authentication",  
  handler: async (options: AuthProcedureOptions = { required: true }, ctx): Promise<AuthContext | Response | void> => {
    const { request, response, context } = ctx;
    
    // Observation: Extract the session token from request cookies.
    const sessionToken = request.cookies.get("sessionToken");

    // Business Rule: Instantiate AuthRepository using the database client from the context.
    const authRepository = new AuthRepository(context.services.database);

    // Security Rule: If authentication is required and there is no session token, return 401 Unauthorized.
    if (options.required && !sessionToken) {
      throw new IgniterResponseError({
        code: "ERR_UNAUTHORIZED",
        message: "Authentication required. Please provide a valid session token.",
      })
    }

    let userId: string | undefined;

    // Security Rule: If a session token exists, attempt to verify it and extract the user ID.
    if (sessionToken) {
      const decoded = context.services.jwt.verifyToken(sessionToken) as { userId: string };
      if (decoded) userId = decoded.userId;
    }

    // Business Rule: Attempt to find the user by ID using the AuthRepository.
    const user = await authRepository.getUserById(userId);

    // Security Rule: If authentication is required but the user is not found, return 401 Unauthorized.
    if (options.required && !user) {
      throw new IgniterResponseError({
        code: "ERR_UNAUTHORIZED",
        message: "Authenticated user not found.",
      })
    }

    // Response: Return the extended context with user session and repository.
    return { auth: { session: { user }, repository: authRepository } };
  },
});
```

## 2. Applying Procedures to Actions

Procedures are applied to individual actions or entire controllers using the `use` property.

-   **Action-Level:** Apply to a specific query or mutation. This is the most common and recommended approach.
-   **Controller-Level:** Apply to all actions within a controller.

### ✅ Correct Usage in a Controller

```typescript
import { igniter } from "@/igniter";
import { z } from "zod";
import { authProcedure } from "../../auth/procedures/auth.procedure";
import { eventsProcedure } from "../procedures/events.procedure";

export const eventsController = igniter.controller({
  name: "events",
  path: "/events",
  actions: {
    create: igniter.mutation({
      name: "Create",
      description: "Create new event type",
      path: "/",
      use: [authProcedure({ required: true }), eventsProcedure()], // Injects auth and events repository
      body: z.object({ /* ... */ }),
      handler: async ({ request, response, context }) => {
        // Authentication: Retrieve the authenticated user's ID from the context.
        const userId = context.auth.session.user!.id;

        // Business Logic: Create a new event using the EventsRepository.
        const event = await context.events.repository.create({
          title: request.body.title,
          description: request.body.description,
          duration: request.body.duration,
          userId,
        });

        // Response: Return the newly created event with a 201 status.
        return response.created(event);
      },
    }),
    list: igniter.query({
      name: "List",
      description: "List all user events",
      path: "/",
      use: [authProcedure({ required: true }), eventsProcedure()], // Injects auth and events repository
      handler: async ({ response, context }) => {
        // Authentication: Retrieve the authenticated user's ID from the context.
        const userId = context.auth.session.user!.id;

        // Business Logic: Retrieve all events belonging to the authenticated user.
        const events = await context.events.repository.list(userId);

        // Response: Return the list of events with a 200 status.
        return response.success(events);
      },
    }),
  },
});
```

## 3. Common Pitfalls

### ❌ Incorrectly Extending Context or Misusing `next()`

```typescript
// ❌ WRONG - Using next() to extend context or not handling its return
handler: async (options, ctx) => {
  const { context, next } = ctx;
  const newContext = { ...context, auth: { user } };
  return next(newContext); // This will fail or lose context extension!
  // OR (if not awaiting next() when result processing is needed)
  next(); // Loses the opportunity to process the action's result.
}
```

### ❌ Forgetting to Return the Context Object

```typescript
// ❌ WRONG - Modifying context directly
handler: async (options, ctx) => {
  const { context } = ctx;
  context.auth = { user }; // This mutation will be lost!
  return;
}
```
