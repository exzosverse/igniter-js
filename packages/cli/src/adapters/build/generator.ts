import * as fs from 'fs'
import * as path from 'path'
import type { IgniterBuildConfig } from './watcher'

type IgniterRouterSchema = {
  config: {
    baseURL: string
    basePATH: string
  }
  controllers: Record<string, any>
}

type IgniterRouter = {
  config: {
    baseURL: string
    basePATH: string
  }
  controllers: Record<string, any>
  processor: any
  handler: any
}

/**
 * Extracts a clean schema from router for client-side usage.
 * Removes all server-side logic (handlers, middleware, adapters).
 */
function extractRouterSchema(router: IgniterRouter): IgniterRouterSchema {
  const controllersSchema: Record<string, any> = {};
  
  for (const [controllerName, controller] of Object.entries(router.controllers)) {
    const actionsSchema: Record<string, any> = {};
    
    // ‚úÖ CORRE√á√ÉO: Agora acessamos corretamente as actions do controller
    if (controller && controller.actions) {
      for (const [actionName, action] of Object.entries(controller.actions)) {
        // ‚úÖ CORRE√á√ÉO: Agora extra√≠mos apenas as propriedades seguras
        actionsSchema[actionName] = {
          path: (action as any)?.path || '',
          method: (action as any)?.method || 'GET',
          description: (action as any)?.description,
          // Keep type inference data
          $Infer: (action as any)?.$Infer,
          // ‚ùå Remove: handler, use, $Caller, body, query (podem conter server logic)
        };
      }
    }
    
    controllersSchema[controllerName] = {
      name: (controller as any)?.name || controllerName,
      path: (controller as any)?.path || '',
      actions: actionsSchema,
    };
  }
  
  return {
    config: {
      baseURL: router.config?.baseURL || '',
      basePATH: router.config?.basePATH || '',
    },
    controllers: controllersSchema,
  };
}

/**
 * Generate client files from Igniter router
 */
export async function generateSchemaFromRouter(
  router: IgniterRouter,
  config: IgniterBuildConfig
) {
  try {
    if (config.debug) {
      console.log('üöÄ Starting generateSchemaFromRouter...')
      console.log('   Router keys:', Object.keys(router || {}))
      console.log('   Config:', JSON.stringify(config, null, 2))
    }

    // Extract clean schema from router
    if (config.debug) {
      console.log('üìä Extracting schema from router...')
    }
    const schema = extractRouterSchema(router)
    
    if (config.debug) {
      console.log('‚úÖ Schema extracted successfully')
      console.log('   Controllers found:', Object.keys(schema.controllers).length)
      console.log('   Config:', schema.config)
    }

    // Ensure output directory exists
    const outputDir = config.outputDir || 'generated'
    if (config.debug) {
      console.log('üìÅ Ensuring output directory exists:', outputDir)
    }
    await ensureDirectoryExists(outputDir)
    
    if (config.debug) {
      console.log('‚úÖ Output directory ready')
    }

    // Generate schema file
    if (config.debug) {
      console.log('üìù Generating schema file...')
    }
    await generateSchemaFile(schema, outputDir, config)
    
    if (config.debug) {
      console.log('‚úÖ Schema file generated')
    }
    
    // Generate client file
    if (config.debug) {
      console.log('üìù Generating client file...')
    }
    await generateClientFile(schema, outputDir, config)
    
    if (config.debug) {
      console.log('‚úÖ Client file generated')
    }
    
    // Generate index file
    if (config.debug) {
      console.log('üìù Generating index file...')
    }
    await generateIndexFile(outputDir, config)

    if (config.debug) {
      console.log('‚úÖ Index file generated')
      console.log('üéâ All files generated successfully:')
      console.log(`   üìÑ ${outputDir}/schema.generated.ts`)
      console.log(`   üìÑ ${outputDir}/client.generated.ts`)
      console.log(`   üìÑ ${outputDir}/index.ts`)
    }

  } catch (error) {
    if (config.debug) {
      console.error('üí• Error in generateSchemaFromRouter:', error)
      console.error('   Stack:', (error as Error).stack)
    }
    console.error('‚ùå Failed to generate schema from router:', error)
    throw error
  }
}

/**
 * Generate schema TypeScript file
 */
async function generateSchemaFile(
  schema: IgniterRouterSchema,
  outputDir: string,
  config: IgniterBuildConfig
) {
  const content = `// Generated by @igniter-js/cli - DO NOT EDIT

export const AppRouterSchema = ${JSON.stringify(schema, null, 2)} as const

export type AppRouterSchemaType = typeof AppRouterSchema
`

  const filePath = path.join(outputDir, 'schema.generated.ts')
  await writeFileWithHeader(filePath, content, config)
}

/**
 * Generate client TypeScript file
 */
async function generateClientFile(
  schema: IgniterRouterSchema,
  outputDir: string,
  config: IgniterBuildConfig
) {
  const content = `// Generated by @igniter-js/cli - DO NOT EDIT

import { createIgniterClient } from '@igniter-js/core/client'
import { AppRouterSchema } from './schema.generated'
import type { AppRouterSchemaType } from './schema.generated'

/**
 * Type-safe API client generated from your Igniter router
 * 
 * Usage in Server Components:
 * const users = await api.users.list.query()
 * 
 * Usage in Client Components:
 * const { data } = api.users.list.useQuery()
 */
export const api = createIgniterClient<AppRouterSchemaType>({
  baseUrl: '${schema.config.baseURL || schema.config.basePATH || '/api/v1'}',
  schema: AppRouterSchema
})

export type ApiClient = typeof api
`

  const filePath = path.join(outputDir, 'client.generated.ts')
  await writeFileWithHeader(filePath, content, config)
}

/**
 * Generate index file for easy imports
 */
async function generateIndexFile(
  outputDir: string,
  config: IgniterBuildConfig
) {
  const content = `// Generated by @igniter-js/cli - DO NOT EDIT

export { api } from './client.generated'
export type { AppRouterSchemaType } from './schema.generated'
export type { ApiClient } from './client.generated'
`

  const filePath = path.join(outputDir, 'index.ts')
  await fs.promises.writeFile(filePath, content, 'utf8')
}

/**
 * Write file with generation header
 */
async function writeFileWithHeader(
  filePath: string,
  content: string,
  config: IgniterBuildConfig
) {
  const header = generateFileHeader(config)
  const fullContent = header + '\n\n' + content
  
  await fs.promises.writeFile(filePath, fullContent, 'utf8')
}

/**
 * Generate file header with metadata
 */
function generateFileHeader(config: IgniterBuildConfig): string {
  const timestamp = new Date().toISOString()
  
  return `/**
 * Generated by @igniter-js/cli
 * 
 * ‚ö†Ô∏è  DO NOT EDIT THIS FILE MANUALLY
 * 
 * This file was automatically generated from your Igniter router.
 * Any changes made to this file will be overwritten when the CLI regenerates it.
 * 
 * To modify the client API, update your controller files instead.
 * 
 * Generated: ${timestamp}
 * Framework: ${config.framework}
 * Output: ${config.outputDir}
 */`
}

/**
 * Ensure directory exists, create if it doesn't
 */
async function ensureDirectoryExists(dirPath: string) {
  try {
    await fs.promises.access(dirPath)
  } catch (error) {
    // Directory doesn't exist, create it
    await fs.promises.mkdir(dirPath, { recursive: true })
  }
} 