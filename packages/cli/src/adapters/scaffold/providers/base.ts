/**
 * @file This file defines the base interfaces for schema providers.
 *
 * A "Schema Provider" is an adapter responsible for reading a database
 * schema from a specific source (like Prisma or Drizzle) and translating
 * it into a standardized format that the Igniter.js scaffolding engine
 * can understand. This abstraction allows the CLI to support different
 * ORMs and database tools in a pluggable way.
 */

/**
 * Represents a single field within a database model schema.
 * This is the standardized, ORM-agnostic format used by the scaffolding engine.
 */
export interface SchemaProviderField {
  /**
   * The name of the field (e.g., `email`, `postTitle`).
   */
  name: string;

  /**
   * The standardized TypeScript data type for the field (e.g., 'string', 'number', 'Date', 'boolean').
   */
  type: string;

  /**
   * True if this field is the primary identifier for the model.
   */
  isId: boolean;

  /**
   * True if this field must have a value (i.e., it is not nullable).
   */
  isRequired: boolean;

  /**
   * True if the database enforces a unique constraint on this field.
   */
  isUnique: boolean;

  /**
   * True if this field represents a relationship to another model.
   * The scaffolding engine may skip relation fields for simple CRUD generation.
   */
  isRelation: boolean;

  /**
   * True if the database provides a default value for this field (e.g., `now()`, `autoincrement()`).
   * These fields are typically excluded from creation inputs.
   */
  hasDefault: boolean;

  /**
   * True if the field's value is managed and updated automatically by the database
   * (e.g., `updatedAt` timestamps).
   */
  isAutoGenerated: boolean;
}

/**
 * Represents the standardized structure of a single database model,
 * translated from its ORM-specific definition.
 */
export interface ModelSchema {
  /**
   * The name of the model in PascalCase (e.g., `User`, `BlogPost`).
   */
  name: string;

  /**
   * An array of fields belonging to this model.
   */
  fields: SchemaProviderField[];
}

/**
 * Defines the contract that all schema providers must implement.
 *
 * This allows the CLI to interact with different schema sources (Prisma, Drizzle, etc.)
 * through a consistent, standardized API.
 */
export interface SchemaProvider {
  /**
   * Reads the schema source (e.g., `schema.prisma`) and extracts the details
   * for a specific model.
   *
   * @param modelName - The name of the model to retrieve from the schema (e.g., 'User').
   * @returns A promise that resolves to the standardized `ModelSchema`, or `null` if the model cannot be found.
   */
  getModel(modelName: string): Promise<ModelSchema | null>;

  /**
   * Lists all available model names in the schema.
   *
   * @returns A promise that resolves to an array of model names.
   */
  listModels(): Promise<string[]>;
}
